services:
  client-register:
    build:
      context: .
      dockerfile: apps/client-register/Dockerfile
    container_name: client-register
    restart: unless-stopped
    depends_on:
      - client-register-mongodb
      - client-register-redis
      - kafka
    env_file:
      - .env.local
      # - .env # Uncomment if you have a .env file
    ports:
      - 3000:3000
    network_mode: host

  notification:
    build:
      context: .
      dockerfile: apps/notification/Dockerfile
    container_name: notification
    restart: unless-stopped
    depends_on:
      - kafka
    env_file:
      - .env.local
      # - .env # Uncomment if you have a .env file
    network_mode: host
  client-register-mongodb:
    image: mongo:latest
    container_name: client-register-mongodb
    restart: unless-stopped
    ports:
      - 27020:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongodb
      MONGO_INITDB_ROOT_PASSWORD: mongodb
    volumes:
      - client-register-mongodb-data:/data/db

  client-register-redis:
    image: redis:latest
    container_name: client-register-redis
    restart: unless-stopped
    ports:
      - 6381:6379
    volumes:
      - client-register-redis:/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    container_name: zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    container_name: kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

volumes:
  client-register-mongodb-data:
  client-register-redis:
