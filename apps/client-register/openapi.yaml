openapi: "3.1.0"
info:
  title: Client Register API
  version: 1.0.0
  description: API for client management.

servers:
  - url: http://localhost:3000

tags:
  - name: health
    description: Health check endpoints
  - name: clients
    description: Endpoints for managing clients

paths:
  /health:
    get:
      tags:
        - health
      summary: Health check
      responses:
        "200":
          description: Server is healthy

  /clients:
    post:
      tags:
        - clients
      summary: Create a new client
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateClientInputDTO"
      responses:
        "201":
          description: Client created successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict - Email or Phone already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags:
        - clients
      summary: Get all clients (paginated)
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            example: 10
        - name: search
          in: query
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [name, email, phone, age, createdAt]
        - name: sortOrder
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
      responses:
        "200":
          description: Paginated list of clients
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllClientsOutputDTO"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /clients/{id}:
    get:
      tags:
        - clients
      summary: Get client by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Client details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetClientByIdOutputDTO"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Client not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    patch:
      tags:
        - clients
      summary: Update client details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateClientInputDTO"
      responses:
        "204":
          description: Client updated successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Client not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict - Email or Phone already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - clients
      summary: Delete a client
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Client deleted successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Client not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /clients/{id}/password:
    patch:
      tags:
        - clients
      summary: Update client password
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateClientPasswordInputDTO"
      responses:
        "204":
          description: Password updated successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Client not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict - Current password incorrect
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    CreateClientInputDTO:
      type: object
      required: [name, email, phone, age, password, isActive]
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        age:
          type: integer
        password:
          type: string
        isActive:
          type: boolean

    UpdateClientInputDTO:
      type: object
      required: [id]
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        age:
          type: integer
        isActive:
          type: boolean

    UpdateClientPasswordInputDTO:
      type: object
      required: [id, currentPassword, newPassword]
      properties:
        id:
          type: string
        currentPassword:
          type: string
        newPassword:
          type: string

    GetAllClientsOutputDTO:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ClientDTO"
        total:
          type: integer
          example: 100
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        totalPages:
          type: integer
          example: 10

    GetClientByIdOutputDTO:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/ClientDTO"

    ClientDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        age:
          type: integer
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ErrorResponse:
      type: object
      required: [error]
      properties:
        error:
          type: string
          example: "An error occurred"
